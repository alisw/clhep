# ======================================================================
# This is the Vector configuration input file
# Process this file with autoconf to produce a configure script.
# ======================================================================


# ----------------------------------------------------------------------
# Identify the package and initialize the autotools:
# ----------------------------------------------------------------------

AC_PREREQ(2.59)
AC_INIT(CLHEP Vector, 1.9.1.2, CLHEP@cern.ch, Vector)
AC_CONFIG_AUX_DIR(autotools)
AC_CANONICAL_TARGET
AC_CONFIG_SRCDIR([src/AxisAngle.cc])
AM_INIT_AUTOMAKE(1.9 foreign)
AC_PROG_LIBTOOL
AC_PROG_INSTALL
AC_PROG_LN_S

# ----------------------------------------------------------------------
# Identify the files that 'configure' is to produce:
# ----------------------------------------------------------------------

# Header containing #defines:
AM_CONFIG_HEADER([Vector/defs.h])

# Makefiles:
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([Vector/Makefile])
AC_CONFIG_FILES([src/Makefile])
AC_CONFIG_FILES([test/Makefile])
AC_CONFIG_FILES([doc/Makefile])
AC_CONFIG_FILES([Vector-deps])
AC_CONFIG_FILES([Vector/copy-header.pl], [chmod +x Vector/copy-header.pl])

# Configuration inquiry program/script:
AC_CONFIG_FILES([Vector-config], [chmod +x Vector-config])

# Test driver program/script:
AC_CONFIG_FILES([test/testThreeVector.sh], [chmod +x test/testThreeVector.sh])
AC_CONFIG_FILES([test/testLorentzVector.sh], [chmod +x test/testLorentzVector.sh])
AC_CONFIG_FILES([test/testRotation.sh], [chmod +x test/testRotation.sh])
AC_CONFIG_FILES([test/testSubscripts.sh], [chmod +x test/testSubscripts.sh])

# ----------------------------------------------------------------------
# Capture post-install information:
# ----------------------------------------------------------------------

Vector_CPPFLAGS="-I$includedir"
Vector_LDFLAGS="-L$libdir"
Vector_LIBS="-lCLHEP-$PACKAGE-$VERSION"

AC_SUBST(Vector_CPPFLAGS)
AC_SUBST(Vector_LIBS)
AC_SUBST(Vector_LDFLAGS)

# ----------------------------------------------------------------------
# Supply boilerplate for Vector/defs.h source header:
# ----------------------------------------------------------------------

AH_TOP([#ifndef VECTOR_DEFS_H
#define VECTOR_DEFS_H])

## the undefs are converted by configure
AH_VERBATIM([PACKAGE],[/* Name of package */
#ifndef PACKAGE
#undef PACKAGE
#endif])
AH_VERBATIM([PACKAGE_BUGREPORT],[/* Define to the address where bug reports for this package should be sent. */
#ifndef PACKAGE_BUGREPORT
#undef PACKAGE_BUGREPORT
#endif])
AH_VERBATIM([PACKAGE_NAME],[/* Define to the full name of this package. */
#ifndef PACKAGE_NAME
#undef PACKAGE_NAME
#endif])
AH_VERBATIM([PACKAGE_STRING],[/* Define to the full name and version of this package. */
#ifndef PACKAGE_STRING
#undef PACKAGE_STRING
#endif])
AH_VERBATIM([PACKAGE_TARNAME],[/* Define to the one symbol short name of this package. */
#ifndef PACKAGE_TARNAME
#undef PACKAGE_TARNAME
#endif])
AH_VERBATIM([PACKAGE_VERSION],[/* Define to the version of this package. */
#ifndef PACKAGE_VERSION
#undef PACKAGE_VERSION
#endif])
AH_VERBATIM([VERSION],[/* Version number of package */
#ifndef VERSION
#undef VERSION
#endif])

## backwards compatibility
AH_VERBATIM([ENABLE_BACKWARDS_COMPATIBILITY],[/* backwards compatibility will be enabled ONLY in CLHEP 1.9 */
#ifndef ENABLE_BACKWARDS_COMPATIBILITY
#define ENABLE_BACKWARDS_COMPATIBILITY
#endif])

AH_BOTTOM([#endif  // VECTOR_DEFS_H])


# ----------------------------------------------------------------------
# Account for any user configuration options:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Check for needed programs:
# ----------------------------------------------------------------------

# Locate a C++ compiler:
AC_PROG_CXX(cl g++ c++ aCC CC cxx cc++ FCC KCC RCC xlC_r xlC gpp)

# Use it hereinafter:
AC_LANG(C++)

# Ensure we've found a preprocessor:
AC_REQUIRE_CPP

# copy and diff
case "$target" in
*-*-win32*)
  COPY_P="copy -p";DIFF_Q="diff -q -b"
  ;;
*-*-cygwin*)
  COPY_P="cp -p";DIFF_Q="diff -q -b"
  ;;
*-*-solaris*)
  COPY_P="cp -p";DIFF_Q="diff -b"
  ;;
*-*-linux*)
  COPY_P="cp -p";DIFF_Q="diff -q -b"
  ;;
*)
  COPY_P="cp -p";DIFF_Q="diff -q -b"
esac

AC_SUBST(COPY_P)
AC_SUBST(DIFF_Q)

# worry about compiler flags
case "$CXX" in
g++) 
   case "$target" in
   *-*-linux*) AM_CXXFLAGS="-O -ansi -pedantic -Wall -D_GNU_SOURCE";;
   *) AM_CXXFLAGS="-O -ansi -pedantic -Wall"
   esac;;
c++) 
   case "$target" in
   *-*-linux*) AM_CXXFLAGS="-O -ansi -pedantic -Wall -D_GNU_SOURCE";;
   *) AM_CXXFLAGS="-O -ansi -pedantic -Wall"
   esac;;
cl)  
   AM_CXXFLAGS="-EHsc -nologo -GR -GX -MD"
   ;;
CC)  
   case "$target" in
   *-*-solaris*) AM_CXXFLAGS="-O";;
   *-*-hpux*) AM_CXXFLAGS="+O3 +DAportable +a1 -z -pta +Onolimit";;
   *-*-irix*) AM_CXXFLAGS="-O -OPT:Olimit=0 -pta";;
   *)   echo UNEXPECTED CHOICE OF OPERATING SYSTEM FOR $CXX: $target
   esac;;
aCC) 
   AM_CXXFLAGS="-O -Aa +DAportable +Onolimit"
   ;;
cxx) 
   AM_CXXFLAGS="-O -std strict_ansi -timplicit_local"
   ;;
xlC) 
   AM_CXXFLAGS="-O3 -qtwolink -+"
   ;;
*)   echo UNEXPECTED CHOICE OF C++ COMPILER: $CXX
esac

AC_SUBST(AM_CXXFLAGS)

# ----------------------------------------------------------------------
# Set system-dependent options:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Check for needed libraries:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Check for needed header files:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Check for needed typedefs, structures, and compiler characteristics:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Check for needed library functions:
# ----------------------------------------------------------------------


# ----------------------------------------------------------------------
# Finish up:
# ----------------------------------------------------------------------

AC_OUTPUT


# ======================================================================
