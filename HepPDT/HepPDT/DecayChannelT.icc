// ----------------------------------------------------------------------
//
// DecayChannelT.icc
//
// ----------------------------------------------------------------------

#include <algorithm>	// swap()

namespace HepPDT {

template< class Config >
DecayChannelT<Config>::~DecayChannelT()
{ ; }

template< class Config >
DecayChannelT<Config>::DecayChannelT( const DecayChannelT<Config> & orig )
: itsDecayName            ( orig.itsDecayName ),
  itsBranchingFraction    ( orig.itsBranchingFraction ),
  itsDecayChannelProducts ( orig.itsDecayChannelProducts ),
  itsDecayModelParameters ( orig.itsDecayModelParameters ),
  itsDecayModel           ( orig.itsDecayModel )
{ ; }

template< class Config >
DecayChannelT<Config> & DecayChannelT<Config>::operator=( const DecayChannelT<Config> & rhs )
{ 
  if( this != & rhs )
  {
      itsDecayName            = rhs.itsDecayName;
      itsBranchingFraction    = rhs.itsBranchingFraction;
      itsDecayChannelProducts = rhs.itsDecayChannelProducts;
      itsDecayModel           = rhs.itsDecayModel;
      itsDecayModelParameters = rhs.itsDecayModelParameters;
  }
  return *this;
}

template< class Config >
void DecayChannelT<Config>::swap( DecayChannelT<Config> & other )
{ 
    std::swap( itsDecayName            , other.itsDecayName );
    std::swap( itsBranchingFraction    , other.itsBranchingFraction );
    std::swap( itsDecayChannelProducts , other.itsDecayChannelProducts );
    std::swap( itsDecayModel           , other.itsDecayModel );
    std::swap( itsDecayModelParameters , other.itsDecayModelParameters );
     
}
  
  
template< class Config >
void  DecayChannelT<Config>::appendDecayChannelProduct( PD const & dcp )
{
    itsDecayChannelProducts.push_back( dcp );
}

template< class Config >
void DecayChannelT<Config>::write( std::ostream & os ) const
{
  typename ProductMap::const_iterator cit;
  os << "          " << itsDecayName << " " << itsBranchingFraction;
  if( itsDecayChannelProducts.size() > 0 ) { 
    for( cit=itsDecayChannelProducts.begin(); 
	 cit != itsDecayChannelProducts.end(); ++cit ) {
       PD  pd = *cit;
       os << " " << pd->name();
    }
  }
  os << std::endl;
}

template< class Config >
void DecayChannelT<Config>::decay( const PT        & parent,
                                   std::vector<PT> & daughters )
{
    itsDecayModel->decay( itsDecayChannelProducts, parent, daughters);
}

} // HepPDT
