////////////////////////////////////////////////////////////////////////
//
// File: DMFactory.icc
// $Id: DMFactory.icc,v 1.1.1.1 2003/07/15 20:15:05 garren Exp $
// Purpose: DMFactory class
//
// Author:  Marc Paterno
// Created:
// Modified:
//
////////////////////////////////////////////////////////////////////////

#if defined(NT_MSVCPP)
#pragma warning (disable: 4786)
#endif

namespace HepPDT {

template< class Config >
void 
DMFactory<Config>::addProduct(const std::string& k, MakerBase<Config>* m)
{
  _makerfuncs[k] = m;
}

template< class Config >
typename DMFactory<Config>::Product*
DMFactory<Config>::unsafeMakeProduct(const std::string& k,
			     const std::vector<double>& a) const
{
  const_iterator it = _makerfuncs.find(k);
  if ( it == _makerfuncs.end() ) return 0;
  Product* result = it->second->make(a);
  return result;
}

template< class Config >
std::auto_ptr< typename DMFactory<Config>::Product >
DMFactory<Config>::makeProduct(const std::string& k,
  const std::vector<double>& a) const
{
  const_iterator it = _makerfuncs.find(k);
  if ( it == _makerfuncs.end() ) return std::auto_ptr<Product>(0);
  std::auto_ptr<Product> result ( it->second->make(a) );
  return result;
}

template< class Config >
unsigned long
DMFactory<Config>::numKeys() const
{
  return _makerfuncs.size();
}

//
// Singleton related stuff.
//

template< class Config >
DMFactory<Config>::DMFactory() : _makerfuncs() { }

template< class Config >
DMFactory<Config>::~DMFactory()
{
  iterator it, end = _makerfuncs.end();
  for ( it = _makerfuncs.begin(); it != end; ++it) delete (*it).second;
}

template< class Config >
DMFactory<Config>*
DMFactory<Config>::instance()
{
  static Cleaner sentry;
  pretend_to_use( sentry );
  if ( ! _inst ) _inst = new DMFactory<Config>;
  assert ( _inst != 0 );
  return _inst;
}

template< class Config >
void
DMFactory<Config>::destroy_and_clear()
{
  if ( _inst )
    {
      delete _inst;
      _inst = 0;
    }
}

template< class Config >
DMFactory<Config>* DMFactory<Config>::_inst = 0;

}	// HepPDT


/*
** Local Variables: --
** mode: c++ --
** c-file-style: "gnu" --
** tab-width: 2 --
** End: --
*/
