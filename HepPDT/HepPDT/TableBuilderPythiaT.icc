// $Id: TableBuilderPythiaT.icc,v 1.1.1.1 2003/07/15 20:15:05 garren Exp $
// ----------------------------------------------------------------------
//
// TableBuilderPythiaT.icc
// Author: Lynn Garren
//
// ----------------------------------------------------------------------


namespace HepPDT {


bool getPythiaid( int & id, const std::string & pdline );
void parsePythiaLine( TempParticleData & tpd, int & anti, std::string & aname, const std::string & pdline );
void parsePythiaDecayLine( TempParticleData & tpd, const std::string & pdline );
template< class Config >
bool  addPythiaParticles( std::istream & pdfile, TableBuilderT<Config> & tb )
{
  std::string pdline, aname;
  int id, kf;
  int saveid=0;
  int anti=0;
  // read and parse each line
  while( std::getline( pdfile, pdline) ) {
    if( getPythiaid( kf, pdline ) ) {
      if( kf != 0 ) {
          // this is a new particle definition
          saveid = id = translatePythiatoPDT( kf );
          TempParticleData& tpd = tb.getParticleData( ParticleID( id ) );
          parsePythiaLine( tpd, anti, aname, pdline );
	  if( anti > 0 ) {
	      // code here to define antiparticles
	      TempParticleData& atpd = tb.getAntiParticle( ParticleID( id ), aname );
              // use this variable (fake out the compiler)
              atpd.tempMass = tpd.tempMass;
	  }
      } else if( saveid != 0 ) {
          TempParticleData& tpd = tb.getParticleData( ParticleID( saveid ) );
          parsePythiaDecayLine( tpd, pdline );
	  if( anti > 0 ) {
	      // code here to append antiparticle decays
	  }
      }
    }
  }
  std::cout << "found " << tb.size() << " particles" << std::endl;
  return true;
}

}  // namespace HepPDT
