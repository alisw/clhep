// $Id: DecayDataT.icc,v 1.1.1.1 2003/07/15 20:15:05 garren Exp $
// ----------------------------------------------------------------------
//
// DecayDataT.icc
//
// ----------------------------------------------------------------------

namespace HepPDT {

template< class Config >
DecayDataT<Config>::DecayDataT( )
: itsDecayList    ( 0 )
{ ; }

template< class Config >
DecayDataT<Config>::DecayDataT( std::vector<DecayChannelT<Config> > const & dv )
: itsDecayList    ( dv )
{ ; }

template< class Config >
DecayDataT<Config>::~DecayDataT()
{ ; }

template< class Config >
DecayDataT<Config>::DecayDataT( DecayDataT<Config> const & orig )
: itsDecayList    ( orig.itsDecayList )
{ ; }

template< class Config >
DecayDataT<Config> & DecayDataT<Config>::operator = ( DecayDataT<Config> const & rhs )
{ 
  if( this != & rhs )
  {
      itsDecayList    = rhs.itsDecayList;
  }
  return *this;
}

template< class Config >
void DecayDataT<Config>::swap( DecayDataT<Config> & other )
{
   std::swap( itsDecayList, other.itsDecayList );
}

template< class Config >
void DecayDataT<Config>::write( std::ostream & os ) const
{
  typename std::vector<DecayChannelT<Config> >::const_iterator cit;
  for( cit=itsDecayList.begin(); cit != itsDecayList.end(); ++cit ) {
      const DecayChannelT<Config>  dt = *cit;
      dt.write( os );
  }
}

template< class Config >
bool  DecayDataT<Config>::isStable() const
{
    if( itsDecayList.size() > 0) { return false; }
    return true;
}

template< class Config >
bool  DecayDataT<Config>::decay( int i, const PT & parent, std::vector<PT> & daughters )
{
    if( i >= itsDecayList.size() ) { return false; }
    itsDecayList[i].decay( parent, daughters );
    return true;
}

template< class Config >
bool  DecayDataT<Config>::decay( double rdm, const PT & parent, std::vector<PT> & daughters )
{
    int i;
    double bfsum = 0.;
    if( rdm < 0. || rdm > 1. ) { return false; }

    for( i=0; i<itsDecayList.size(); ++i ) {
        bfsum += itsDecayList[i].branchingFraction();
	if( rdm <= bfsum ) { 
	    itsDecayList[i].decay( parent, daughters );
	    return true;
	}
    }
    return false;
}

template< class Config >
void  DecayDataT<Config>::appendMode( DecayChannelT<Config> dc )
{
    itsDecayList.push_back( dc );
}

} // HepPDT
